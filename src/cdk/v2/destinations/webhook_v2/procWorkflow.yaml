bindings:
  - name: EventType
    path: ../../../../constants
  - path: ../../bindings/jsontemplate
    exportAll: true
  - path: ../../../../v0/destinations/webhook/utils
  - name: getHashFromArray
    path: ../../../../v0/util
  - name: getIntegrationsObj
    path: ../../../../v0/util
  - name: removeUndefinedAndNullValues
    path: ../../../../v0/util
  - name: defaultRequestConfig
    path: ../../../../v0/util
  - path: ./utils

steps:
  - name: checkIfProcessed
    condition: .message.statusCode
    template: |
      $.batchMode ? .message.body.JSON : .message
    onComplete: return

  - name: validateInput
    template: |
      $.assertConfig(.destination.Config.webhookUrl, "Webhook URL required. Aborting");
      $.assertConfig(!(.destination.Config.auth === "basicAuth" && !(.destination.Config.username)), "Username is required for Basic Authentication. Aborting");
      $.assertConfig(!(.destination.Config.auth === "basicAuth" && !(.destination.Config.password)), "Password is required for Basic Authentication. Aborting");
      $.assertConfig(!(.destination.Config.auth === "bearerTokenAuth" && !(.destination.Config.bearerToken)), "Token is required for Bearer Token Authentication. Aborting");
      $.assertConfig(!(.destination.Config.auth === "apiKeyAuth" && !(.destination.Config.apiKeyName)), "API Key Name is required for API Key Authentication. Aborting");
            $.assertConfig(!(.destination.Config.auth === "apiKeyAuth" && !(.destination.Config.apiKeyValue)), "API Key Value is required for API Key Authentication. Aborting");

  - name: deduceMethod
    template: |
      $.context.method = .destination.Config.method ?? 'POST';

  - name: deduceBodyFormat
    template: |
      $.context.format = .destination.Config.format ?? 'JSON';

  - name: buildHeaders
    template: |
      const defaultHeaders = $.context.method in ['POST', 'PUT', 'PATCH'] ? {"content-type": "application/json"} : {};
      const configAuthHeaders = $.getAuthHeaders(.destination.Config);
      const additionalConfigHeaders = $.getCustomMappings(.message, .destination.Config.headers);   
      $.context.headers = {
        ...defaultHeaders,
        ...configAuthHeaders,
        ...additionalConfigHeaders
      }

  - name: prepareParams
    condition: $.context.method in ['get', 'delete']
    template: |
      $.context.params = $.getCustomMappings(.message, .destination.Config.queryParams)

  - name: deduceEndPoint
    template: |
      $.context.endpoint = $.addPathParams(.message, .destination.Config.webhookUrl);

  - name: prepareBody
    condition: $.context.method in ['post', 'put', 'patch']
    template: |
      let payload = .message;
      payload = {...payload, ...$.getCustomMappings(.message, .destination.Config.eventsMapping)};
      let ip = .message.context.ip ?? .message.request_ip;
      ip && (
        payload.context = payload.context || {};
        payload.context.ip = ip;
      )
      $.context.payload = $.removeUndefinedAndNullValues($.excludeMappedFields(payload, .destination.Config.eventsMapping))

  - name: buildResponseForProcessTransformation
    template: |
      const response = $.defaultRequestConfig();
      response.body.JSON = $.context.payload;
      response.endpoint = $.context.endpoint;
      response.headers = $.context.headers;
      response.params = $.context.params;
      response.method = $.context.method;
      response
