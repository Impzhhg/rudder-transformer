bindings:
  - name: EventType
    path: ../../../../constants
  - path: ../../bindings/jsontemplate
    exportAll: true
  - path: ./config
  - name: removeUndefinedAndNullValues
    path: ../../../../v0/util
  - name: defaultRequestConfig
    path: ../../../../v0/util
  - path: ./utils
  - name: handleRtTfSingleEventError
    path: ../../../../v0/util/index

steps:
  - name: validateInput
    template: |
      $.assert(Array.isArray(^) && ^.length > 0, "Invalid event array")

  - name: finalJsonPayload
    template: |
      const finalJsonPayload = $.combinePayloads(^.{.message.type === $.EventType.IDENTIFY}[], ^[0].destination)
      finalJsonPayload

  - name: constructRouterPayload
    template: |
      const routerPayload = {
        "batchedRequest": {
          version: '1',
          type: 'REST',
          method: 'POST',
          endpoint: '',
          headers: {
            'Content-Type': 'application/json',
          },
          params: {},
          body: {
            JSON: $.outputs.finalJsonPayload.payload,
            JSON_ARRAY: {},
            XML: {},
            FORM: {},
          },
          "files": {},
        },
        "batched": false,
        "destination": $.outputs.finalJsonPayload.destination,
        "metadata": $.outputs.finalJsonPayload.successMetadata,
        "statusCode": 200
      }
      routerPayload
  - name: finalPayload
    template: |
      [$.outputs.constructRouterPayload]
